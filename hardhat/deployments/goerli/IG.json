{
  "address": "0x10e627D7B545542090579461FDf96bd57c88c209",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "_royalityFee",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "_artist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "whitelistContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Sale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleEnded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royalityFee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_royalityFee",
          "type": "uint96"
        }
      ],
      "name": "setRoyalityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb8316078bb28c95033f3989c0dc53825da37a8edca0f9b9fb00a477d1d40ff47",
  "receipt": {
    "to": null,
    "from": "0x2381776d931953e142e51620944bDA170eD9C846",
    "contractAddress": "0x10e627D7B545542090579461FDf96bd57c88c209",
    "transactionIndex": 49,
    "gasUsed": "4867762",
    "logsBloom": "0x
    "blockHash": "0xa2ec0c96d57df2dcba9e8fc83e8f478b580cb045ff59b72408154242f027c901",
    "transactionHash": "0xb8316078bb28c95033f3989c0dc53825da37a8edca0f9b9fb00a477d1d40ff47",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 8214513,
        "transactionHash": "0xb8316078bb28c95033f3989c0dc53825da37a8edca0f9b9fb00a477d1d40ff47",
        "address": "0x10e627D7B545542090579461FDf96bd57c88c209",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002381776d931953e142e51620944bda170ed9c846"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0xa2ec0c96d57df2dcba9e8fc83e8f478b580cb045ff59b72408154242f027c901"
      }
    ],
    "blockNumber": 8214513,
    "cumulativeGasUsed": "11249370",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmTpncDc9C9NZwKEtpiZmC7NftCwb3ybV7xeapC6yb1Z1s/",
    250,
    "0x2381776d931953e142e51620944bDA170eD9C846",
    "0x1e3c83FA89C426221103F3f38B779c941B46c860"
  ],
  "numDeployments": 1,
  "solcInputHash": "94bbd2d2b0e1ea841d5b6f58d18d916f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"_royalityFee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whitelistContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalityFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_royalityFee\",\"type\":\"uint96\"}],\"name\":\"setRoyalityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint()\":{\"details\":\"mint allows a user to mint 1 NFT per transaction after the presale has ended.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IG.sol\":\"IG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IG.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IWhitelist.sol\\\";\\n\\ncontract IG is ERC721Enumerable, ERC2981, Ownable {\\n    using Strings for uint256;\\n    \\n    string public baseExtension = \\\".json\\\";\\n    // string _baseTokenURI;\\n    string baseURI;\\n\\n    address public artist;\\n    uint96 public royalityFee;\\n\\n    event Sale(address from, address to, uint256 value);\\n\\n    //  _price is the price of one Crypto Dev NFT\\n    uint256 public _price = 0.01 ether;\\n\\n    // _paused is used to pause the contract in case of an emergency\\n    bool public _paused;\\n\\n    // max number of CryptoDevs\\n    uint256 public maxTokenIds = 10;\\n\\n    // total number of tokenIds minted\\n    uint256 public tokenIds;\\n\\n    // Whitelist contract instance\\n    IWhitelist whitelist;\\n\\n    // boolean to keep track of whether presale started or not\\n    bool public presaleStarted;\\n\\n    // timestamp for when presale would end\\n    uint256 public presaleEnded;\\n\\n    modifier onlyWhenNotPaused {\\n        require(!_paused, \\\"Contract currently paused\\\");\\n        _;\\n    }\\n    // constructor (string memory baseURI, address whitelistContract) ERC721(\\\"Crypto Devs\\\", \\\"CD\\\") {\\n    //     _baseTokenURI = baseURI;\\n    //     whitelist = IWhitelist(whitelistContract);\\n    // }\\n\\n     constructor(\\n        string memory _initBaseURI,\\n        uint96 _royalityFee,\\n        address _artist,\\n        address whitelistContract\\n\\n    ) ERC721(\\\"IG\\\", \\\"IGCollection\\\") {\\n        setBaseURI(_initBaseURI);\\n        royalityFee = _royalityFee;\\n        artist = _artist;\\n        _setDefaultRoyalty(_artist, _royalityFee);\\n        whitelist = IWhitelist(whitelistContract);\\n    }\\n\\n    function startPresale() public onlyOwner {\\n        presaleStarted = true;\\n        presaleEnded = block.timestamp + 5 minutes;\\n    }\\n\\n    function presaleMint() public payable onlyWhenNotPaused {\\n        require(presaleStarted && block.timestamp < presaleEnded, \\\"Presale is not running\\\");\\n        require(whitelist.whitelistedAddresses(msg.sender), \\\"You are not whitelisted\\\");\\n        require(tokenIds < maxTokenIds, \\\"Exceeded maximum Crypto Devs supply\\\");\\n        require(msg.value >= _price, \\\"Ether sent is not correct\\\");\\n        tokenIds += 1;\\n\\n        if (msg.sender != owner()) {\\n            require(msg.value >= _price);\\n\\n            // Pay royality to artist, and remaining to deployer of contract\\n\\n            uint256 royality = (msg.value * royalityFee) / 100;\\n            _payRoyality(royality);\\n\\n            (bool success2, ) = payable(owner()).call{\\n                value: (msg.\\n                value - royality)\\n            }(\\\"\\\");\\n            require(success2);\\n        }\\n\\n        _safeMint(msg.sender, tokenIds);\\n        _setTokenRoyalty(tokenIds, msg.sender, royalityFee);\\n    }\\n\\n    /**\\n    * @dev mint allows a user to mint 1 NFT per transaction after the presale has ended.\\n    */\\n    function mint() public payable onlyWhenNotPaused {\\n        require(presaleStarted && block.timestamp >=  presaleEnded, \\\"Presale has not ended yet\\\");\\n        require(tokenIds < maxTokenIds, \\\"Exceed maximum Crypto Devs supply\\\");\\n        // require(msg.value >= _price, \\\"Ether sent is not correct\\\");\\n        tokenIds += 1;\\n\\n\\n        if (msg.sender != owner()) {\\n            require(msg.value >= _price);\\n\\n            // Pay royality to artist, and remaining to deployer of contract\\n\\n            uint256 royality = (msg.value * royalityFee) / 100;\\n            _payRoyality(royality);\\n\\n            (bool success2, ) = payable(owner()).call{\\n                value: (msg.value - royality)\\n            }(\\\"\\\");\\n            require(success2);\\n        }\\n        _safeMint(msg.sender, tokenIds);\\n        _setTokenRoyalty(tokenIds, msg.sender, royalityFee);\\n    }\\n\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory currentBaseURI = _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        currentBaseURI,\\n                        tokenId.toString(),\\n                        baseExtension\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721, IERC721) {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        super._transfer(from, to, tokenId);\\n    }\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721, IERC721) {\\n\\n        super.safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n    // function _baseURI() internal view virtual override returns (string memory) {\\n    //     return _baseTokenURI;\\n    // }\\n\\n    function setPaused(bool val) public onlyOwner {\\n        _paused = val;\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override(ERC721, IERC721) {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    function contractURI() public pure returns (string memory) {\\n        return \\\"ipfs://QmTpncDc9C9NZwKEtpiZmC7NftCwb3ybV7xeapC6yb1Z1s/\\\";\\n    }\\n\\n    // Internal functions\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function _payRoyality(uint256 _royalityFee) internal {\\n        (bool success1, ) = payable(artist).call{value: _royalityFee}(\\\"\\\");\\n        require(success1);\\n    }\\n\\n    // Owner functions\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setRoyalityFee(uint96 _royalityFee) public onlyOwner {\\n        royalityFee = _royalityFee;\\n    }\\n\\n\\n    function withdraw() public onlyOwner  {\\n        address _owner = owner();\\n        uint256 amount = address(this).balance;\\n        (bool sent, ) =  _owner.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public view virtual override(ERC721Enumerable, ERC2981)\\n        returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n      // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x17f8b9981672ac6fc9abddb22ae52b3d243aa28ef959b5a46803ee8aafb9abe7\",\"license\":\"UNLICENSED\"},\"contracts/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IWhitelist {\\n    function whitelistedAddresses(address) external view returns (bool);\\n}\",\"keccak256\":\"0xb6bf40490acc3a919cb5af20cf01c18df2988abb2e05f94e811bcd8a7f68b9c0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600d90816200004a9190620007f5565b50662386f26fc10000601055600a6012553480156200006857600080fd5b5060405162005ec538038062005ec583398181016040528101906200008e919062000aee565b6040518060400160405280600281526020017f49470000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600c81526020017f4947436f6c6c656374696f6e000000000000000000000000000000000000000081525081600090816200010b9190620007f5565b5080600190816200011d9190620007f5565b50505062000140620001346200022060201b60201c565b6200022860201b60201c565b6200015184620002ee60201b60201c565b82600f60146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001d582846200031360201b60201c565b80601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000d0c565b600033905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002fe620004b660201b60201c565b80600e90816200030f9190620007f5565b5050565b620003236200054760201b60201c565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff16111562000384576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037b9062000c06565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ed9062000c78565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b620004c66200022060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620004ec6200055160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000545576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200053c9062000cea565b60405180910390fd5b565b6000612710905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005fd57607f821691505b602082108103620006135762000612620005b5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200067d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200063e565b6200068986836200063e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006d6620006d0620006ca84620006a1565b620006ab565b620006a1565b9050919050565b6000819050919050565b620006f283620006b5565b6200070a6200070182620006dd565b8484546200064b565b825550505050565b600090565b6200072162000712565b6200072e818484620006e7565b505050565b5b8181101562000756576200074a60008262000717565b60018101905062000734565b5050565b601f821115620007a5576200076f8162000619565b6200077a846200062e565b810160208510156200078a578190505b620007a262000799856200062e565b83018262000733565b50505b505050565b600082821c905092915050565b6000620007ca60001984600802620007aa565b1980831691505092915050565b6000620007e58383620007b7565b9150826002028217905092915050565b62000800826200057b565b67ffffffffffffffff8111156200081c576200081b62000586565b5b620008288254620005e4565b620008358282856200075a565b600060209050601f8311600181146200086d576000841562000858578287015190505b620008648582620007d7565b865550620008d4565b601f1984166200087d8662000619565b60005b82811015620008a75784890151825560018201915060208501945060208101905062000880565b86831015620008c75784890151620008c3601f891682620007b7565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200091682620008fa565b810181811067ffffffffffffffff8211171562000938576200093762000586565b5b80604052505050565b60006200094d620008dc565b90506200095b82826200090b565b919050565b600067ffffffffffffffff8211156200097e576200097d62000586565b5b6200098982620008fa565b9050602081019050919050565b60005b83811015620009b657808201518184015260208101905062000999565b60008484015250505050565b6000620009d9620009d38462000960565b62000941565b905082815260208101848484011115620009f857620009f7620008f5565b5b62000a0584828562000996565b509392505050565b600082601f83011262000a255762000a24620008f0565b5b815162000a37848260208601620009c2565b91505092915050565b60006bffffffffffffffffffffffff82169050919050565b62000a638162000a40565b811462000a6f57600080fd5b50565b60008151905062000a838162000a58565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ab68262000a89565b9050919050565b62000ac88162000aa9565b811462000ad457600080fd5b50565b60008151905062000ae88162000abd565b92915050565b6000806000806080858703121562000b0b5762000b0a620008e6565b5b600085015167ffffffffffffffff81111562000b2c5762000b2b620008eb565b5b62000b3a8782880162000a0d565b945050602062000b4d8782880162000a72565b935050604062000b608782880162000ad7565b925050606062000b738782880162000ad7565b91505092959194509250565b600082825260208201905092915050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b600062000bee602a8362000b7f565b915062000bfb8262000b90565b604082019050919050565b6000602082019050818103600083015262000c218162000bdf565b9050919050565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b600062000c6060198362000b7f565b915062000c6d8262000c28565b602082019050919050565b6000602082019050818103600083015262000c938162000c51565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000cd260208362000b7f565b915062000cdf8262000c9a565b602082019050919050565b6000602082019050818103600083015262000d058162000cc3565b9050919050565b6151a98062000d1c6000396000f3fe60806040526004361061021e5760003560e01c80634f6ccce7116101235780638da5cb5b116100ab578063c87b56dd1161006f578063c87b56dd14610778578063e580b2b0146107b5578063e8a3d485146107e0578063e985e9c51461080b578063f2fde38b1461084857610225565b80638da5cb5b146106a557806395d89b41146106d0578063a22cb465146106fb578063b88d4fde14610724578063c66828621461074d57610225565b80635f769621116100f25780635f769621146105be5780636352211e146105e957806370a0823114610626578063714cff5614610663578063715018a61461068e57610225565b80634f6ccce714610525578063530284021461056257806355f804b31461058b57806359533d6c146105b457610225565b806318160ddd116101a65780632f745c59116101755780632f745c5914610452578063326bb4ad1461048f5780633ccfd60b146104ba57806342842e0e146104d157806343bc1612146104fa57610225565b806318160ddd14610395578063235b6ea1146103c057806323b872dd146103eb5780632a55205a1461041457610225565b8063081812fc116101ed578063081812fc146102d1578063095ea7b31461030e5780631249c58b1461033757806316c38b3c1461034157806316c61ccc1461036a57610225565b806301ffc9a71461022757806304549d6f1461026457806304c98b2b1461028f57806306fdde03146102a657610225565b3661022557005b005b34801561023357600080fd5b5061024e600480360381019061024991906134d4565b610871565b60405161025b919061351c565b60405180910390f35b34801561027057600080fd5b50610279610883565b604051610286919061351c565b60405180910390f35b34801561029b57600080fd5b506102a4610894565b005b3480156102b257600080fd5b506102bb6108cc565b6040516102c891906135c7565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f3919061361f565b61095e565b604051610305919061368d565b60405180910390f35b34801561031a57600080fd5b50610335600480360381019061033091906136d4565b6109a4565b005b61033f610abb565b005b34801561034d57600080fd5b5061036860048036038101906103639190613740565b610d1c565b005b34801561037657600080fd5b5061037f610d41565b60405161038c919061351c565b60405180910390f35b3480156103a157600080fd5b506103aa610d54565b6040516103b7919061377c565b60405180910390f35b3480156103cc57600080fd5b506103d5610d61565b6040516103e2919061377c565b60405180910390f35b3480156103f757600080fd5b50610412600480360381019061040d9190613797565b610d67565b005b34801561042057600080fd5b5061043b600480360381019061043691906137ea565b610dc7565b60405161044992919061382a565b60405180910390f35b34801561045e57600080fd5b50610479600480360381019061047491906136d4565b610fb1565b604051610486919061377c565b60405180910390f35b34801561049b57600080fd5b506104a4611056565b6040516104b1919061387a565b60405180910390f35b3480156104c657600080fd5b506104cf611074565b005b3480156104dd57600080fd5b506104f860048036038101906104f39190613797565b61113e565b005b34801561050657600080fd5b5061050f61115e565b60405161051c919061368d565b60405180910390f35b34801561053157600080fd5b5061054c6004803603810190610547919061361f565b611184565b604051610559919061377c565b60405180910390f35b34801561056e57600080fd5b50610589600480360381019061058491906138c1565b6111f5565b005b34801561059757600080fd5b506105b260048036038101906105ad9190613a23565b611231565b005b6105bc61124c565b005b3480156105ca57600080fd5b506105d36115cc565b6040516105e0919061377c565b60405180910390f35b3480156105f557600080fd5b50610610600480360381019061060b919061361f565b6115d2565b60405161061d919061368d565b60405180910390f35b34801561063257600080fd5b5061064d60048036038101906106489190613a6c565b611658565b60405161065a919061377c565b60405180910390f35b34801561066f57600080fd5b5061067861170f565b604051610685919061377c565b60405180910390f35b34801561069a57600080fd5b506106a3611715565b005b3480156106b157600080fd5b506106ba611729565b6040516106c7919061368d565b60405180910390f35b3480156106dc57600080fd5b506106e5611753565b6040516106f291906135c7565b60405180910390f35b34801561070757600080fd5b50610722600480360381019061071d9190613a99565b6117e5565b005b34801561073057600080fd5b5061074b60048036038101906107469190613b7a565b6117fb565b005b34801561075957600080fd5b5061076261185d565b60405161076f91906135c7565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a919061361f565b6118eb565b6040516107ac91906135c7565b60405180910390f35b3480156107c157600080fd5b506107ca611995565b6040516107d7919061377c565b60405180910390f35b3480156107ec57600080fd5b506107f561199b565b60405161080291906135c7565b60405180910390f35b34801561081757600080fd5b50610832600480360381019061082d9190613bfd565b6119bb565b60405161083f919061351c565b60405180910390f35b34801561085457600080fd5b5061086f600480360381019061086a9190613a6c565b611a4f565b005b600061087c82611ad2565b9050919050565b60148054906101000a900460ff1681565b61089c611b4c565b60016014806101000a81548160ff02191690831515021790555061012c426108c49190613c6c565b601581905550565b6060600080546108db90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461090790613ccf565b80156109545780601f1061092957610100808354040283529160200191610954565b820191906000526020600020905b81548152906001019060200180831161093757829003601f168201915b5050505050905090565b600061096982611bca565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109af826115d2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690613d72565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a3e611c15565b73ffffffffffffffffffffffffffffffffffffffff161480610a6d5750610a6c81610a67611c15565b6119bb565b5b610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa390613e04565b60405180910390fd5b610ab68383611c1d565b505050565b601160009054906101000a900460ff1615610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290613e70565b60405180910390fd5b60148054906101000a900460ff168015610b2757506015544210155b610b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5d90613edc565b60405180910390fd5b60125460135410610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390613f6e565b60405180910390fd5b600160136000828254610bbf9190613c6c565b92505081905550610bce611729565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce757601054341015610c0f57600080fd5b60006064600f60149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1634610c479190613f8e565b610c519190613fff565b9050610c5c81611cd6565b6000610c66611729565b73ffffffffffffffffffffffffffffffffffffffff168234610c889190614030565b604051610c9490614095565b60006040518083038185875af1925050503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b5050905080610ce457600080fd5b50505b610cf333601354611d72565b610d1a60135433600f60149054906101000a90046bffffffffffffffffffffffff16611d90565b565b610d24611b4c565b80601160006101000a81548160ff02191690831515021790555050565b601160009054906101000a900460ff1681565b6000600880549050905090565b60105481565b610d78610d72611c15565b82611f37565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae9061411c565b60405180910390fd5b610dc2838383611fcc565b505050565b6000806000600b60008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603610f5c57600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b6000610f666122c5565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff1686610f929190613f8e565b610f9c9190613fff565b90508160000151819350935050509250929050565b6000610fbc83611658565b8210610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906141ae565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600f60149054906101000a90046bffffffffffffffffffffffff1681565b61107c611b4c565b6000611086611729565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff16826040516110b390614095565b60006040518083038185875af1925050503d80600081146110f0576040519150601f19603f3d011682016040523d82523d6000602084013e6110f5565b606091505b5050905080611139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111309061421a565b60405180910390fd5b505050565b611159838383604051806020016040528060008152506122cf565b505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061118e610d54565b82106111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c6906142ac565b60405180910390fd5b600882815481106111e3576111e26142cc565b5b90600052602060002001549050919050565b6111fd611b4c565b80600f60146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555050565b611239611b4c565b80600e908161124891906144a7565b5050565b601160009054906101000a900460ff161561129c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129390613e70565b60405180910390fd5b60148054906101000a900460ff1680156112b7575060155442105b6112f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ed906145c5565b60405180910390fd5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306c933d8336040518263ffffffff1660e01b8152600401611351919061368d565b602060405180830381865afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139291906145fa565b6113d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c890614673565b60405180910390fd5b60125460135410611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90614705565b60405180910390fd5b60105434101561145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145390614771565b60405180910390fd5b60016013600082825461146f9190613c6c565b9250508190555061147e611729565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611597576010543410156114bf57600080fd5b60006064600f60149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16346114f79190613f8e565b6115019190613fff565b905061150c81611cd6565b6000611516611729565b73ffffffffffffffffffffffffffffffffffffffff1682346115389190614030565b60405161154490614095565b60006040518083038185875af1925050503d8060008114611581576040519150601f19603f3d011682016040523d82523d6000602084013e611586565b606091505b505090508061159457600080fd5b50505b6115a333601354611d72565b6115ca60135433600f60149054906101000a90046bffffffffffffffffffffffff16611d90565b565b60125481565b6000806115de83612331565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361164f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611646906147dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf9061486f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60135481565b61171d611b4c565b611727600061236e565b565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461176290613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461178e90613ccf565b80156117db5780601f106117b0576101008083540402835291602001916117db565b820191906000526020600020905b8154815290600101906020018083116117be57829003601f168201915b5050505050905090565b6117f76117f0611c15565b8383612434565b5050565b61180c611806611c15565b83611f37565b61184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118429061411c565b60405180910390fd5b611857848484846125a0565b50505050565b600d805461186a90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461189690613ccf565b80156118e35780601f106118b8576101008083540402835291602001916118e3565b820191906000526020600020905b8154815290600101906020018083116118c657829003601f168201915b505050505081565b60606118f6826125fc565b611935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192c90614901565b60405180910390fd5b600061193f61263d565b9050600081511161195f576040518060200160405280600081525061198d565b80611969846126cf565b600d60405160200161197d939291906149e0565b6040516020818303038152906040525b915050919050565b60155481565b606060405180606001604052806036815260200161513e60369139905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a57611b4c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd90614a83565b60405180910390fd5b611acf8161236e565b50565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611b455750611b448261279d565b5b9050919050565b611b54611c15565b73ffffffffffffffffffffffffffffffffffffffff16611b72611729565b73ffffffffffffffffffffffffffffffffffffffff1614611bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbf90614aef565b60405180910390fd5b565b611bd3816125fc565b611c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c09906147dd565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c90836115d2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051611d1e90614095565b60006040518083038185875af1925050503d8060008114611d5b576040519150601f19603f3d011682016040523d82523d6000602084013e611d60565b606091505b5050905080611d6e57600080fd5b5050565b611d8c828260405180602001604052806000815250612817565b5050565b611d986122c5565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115611df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ded90614b81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90614bed565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600b600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b600080611f43836115d2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f855750611f8481856119bb565b5b80611fc357508373ffffffffffffffffffffffffffffffffffffffff16611fab8461095e565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611fec826115d2565b73ffffffffffffffffffffffffffffffffffffffff1614612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990614c7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a890614d11565b60405180910390fd5b6120be8383836001612872565b8273ffffffffffffffffffffffffffffffffffffffff166120de826115d2565b73ffffffffffffffffffffffffffffffffffffffff1614612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212b90614c7f565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c083838360016129d0565b505050565b6000612710905090565b6122e06122da611c15565b83611f37565b61231f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231690614da3565b60405180910390fd5b61232b848484846125a0565b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249990614e0f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612593919061351c565b60405180910390a3505050565b6125ab848484611fcc565b6125b7848484846129d6565b6125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed90614ea1565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661261e83612331565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600e805461264c90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461267890613ccf565b80156126c55780601f1061269a576101008083540402835291602001916126c5565b820191906000526020600020905b8154815290600101906020018083116126a857829003601f168201915b5050505050905090565b6060600060016126de84612b5d565b01905060008167ffffffffffffffff8111156126fd576126fc6138f8565b5b6040519080825280601f01601f19166020018201604052801561272f5781602001600182028036833780820191505090505b509050600082602001820190505b600115612792578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161278657612785613fd0565b5b0494506000850361273d575b819350505050919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612810575061280f82612cb0565b5b9050919050565b6128218383612d92565b61282e60008484846129d6565b61286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286490614ea1565b60405180910390fd5b505050565b61287e84848484612faf565b60018111156128c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b990614f33565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361290957612904816130d5565b612948565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461294757612946858261311e565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361298a576129858161328b565b6129c9565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129c8576129c7848261335c565b5b5b5050505050565b50505050565b60006129f78473ffffffffffffffffffffffffffffffffffffffff166133db565b15612b50578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a20611c15565b8786866040518563ffffffff1660e01b8152600401612a429493929190614fa8565b6020604051808303816000875af1925050508015612a7e57506040513d601f19601f82011682018060405250810190612a7b9190615009565b60015b612b00573d8060008114612aae576040519150601f19603f3d011682016040523d82523d6000602084013e612ab3565b606091505b506000815103612af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aef90614ea1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612b55565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612bbb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612bb157612bb0613fd0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612bf8576d04ee2d6d415b85acef81000000008381612bee57612bed613fd0565b5b0492506020810190505b662386f26fc100008310612c2757662386f26fc100008381612c1d57612c1c613fd0565b5b0492506010810190505b6305f5e1008310612c50576305f5e1008381612c4657612c45613fd0565b5b0492506008810190505b6127108310612c75576127108381612c6b57612c6a613fd0565b5b0492506004810190505b60648310612c985760648381612c8e57612c8d613fd0565b5b0492506002810190505b600a8310612ca7576001810190505b80915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612d7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612d8b5750612d8a826133fe565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df890615082565b60405180910390fd5b612e0a816125fc565b15612e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e41906150ee565b60405180910390fd5b612e58600083836001612872565b612e61816125fc565b15612ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e98906150ee565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612fab6000838360016129d0565b5050565b60018111156130cf57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146130435780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461303b9190614030565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130ce5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130c69190613c6c565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161312b84611658565b6131359190614030565b905060006007600084815260200190815260200160002054905081811461321a576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061329f9190614030565b90506000600960008481526020019081526020016000205490506000600883815481106132cf576132ce6142cc565b5b9060005260206000200154905080600883815481106132f1576132f06142cc565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806133405761333f61510e565b5b6001900381819060005260206000200160009055905550505050565b600061336783611658565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134b18161347c565b81146134bc57600080fd5b50565b6000813590506134ce816134a8565b92915050565b6000602082840312156134ea576134e9613472565b5b60006134f8848285016134bf565b91505092915050565b60008115159050919050565b61351681613501565b82525050565b6000602082019050613531600083018461350d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613571578082015181840152602081019050613556565b60008484015250505050565b6000601f19601f8301169050919050565b600061359982613537565b6135a38185613542565b93506135b3818560208601613553565b6135bc8161357d565b840191505092915050565b600060208201905081810360008301526135e1818461358e565b905092915050565b6000819050919050565b6135fc816135e9565b811461360757600080fd5b50565b600081359050613619816135f3565b92915050565b60006020828403121561363557613634613472565b5b60006136438482850161360a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136778261364c565b9050919050565b6136878161366c565b82525050565b60006020820190506136a2600083018461367e565b92915050565b6136b18161366c565b81146136bc57600080fd5b50565b6000813590506136ce816136a8565b92915050565b600080604083850312156136eb576136ea613472565b5b60006136f9858286016136bf565b925050602061370a8582860161360a565b9150509250929050565b61371d81613501565b811461372857600080fd5b50565b60008135905061373a81613714565b92915050565b60006020828403121561375657613755613472565b5b60006137648482850161372b565b91505092915050565b613776816135e9565b82525050565b6000602082019050613791600083018461376d565b92915050565b6000806000606084860312156137b0576137af613472565b5b60006137be868287016136bf565b93505060206137cf868287016136bf565b92505060406137e08682870161360a565b9150509250925092565b6000806040838503121561380157613800613472565b5b600061380f8582860161360a565b92505060206138208582860161360a565b9150509250929050565b600060408201905061383f600083018561367e565b61384c602083018461376d565b9392505050565b60006bffffffffffffffffffffffff82169050919050565b61387481613853565b82525050565b600060208201905061388f600083018461386b565b92915050565b61389e81613853565b81146138a957600080fd5b50565b6000813590506138bb81613895565b92915050565b6000602082840312156138d7576138d6613472565b5b60006138e5848285016138ac565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139308261357d565b810181811067ffffffffffffffff8211171561394f5761394e6138f8565b5b80604052505050565b6000613962613468565b905061396e8282613927565b919050565b600067ffffffffffffffff82111561398e5761398d6138f8565b5b6139978261357d565b9050602081019050919050565b82818337600083830152505050565b60006139c66139c184613973565b613958565b9050828152602081018484840111156139e2576139e16138f3565b5b6139ed8482856139a4565b509392505050565b600082601f830112613a0a57613a096138ee565b5b8135613a1a8482602086016139b3565b91505092915050565b600060208284031215613a3957613a38613472565b5b600082013567ffffffffffffffff811115613a5757613a56613477565b5b613a63848285016139f5565b91505092915050565b600060208284031215613a8257613a81613472565b5b6000613a90848285016136bf565b91505092915050565b60008060408385031215613ab057613aaf613472565b5b6000613abe858286016136bf565b9250506020613acf8582860161372b565b9150509250929050565b600067ffffffffffffffff821115613af457613af36138f8565b5b613afd8261357d565b9050602081019050919050565b6000613b1d613b1884613ad9565b613958565b905082815260208101848484011115613b3957613b386138f3565b5b613b448482856139a4565b509392505050565b600082601f830112613b6157613b606138ee565b5b8135613b71848260208601613b0a565b91505092915050565b60008060008060808587031215613b9457613b93613472565b5b6000613ba2878288016136bf565b9450506020613bb3878288016136bf565b9350506040613bc48782880161360a565b925050606085013567ffffffffffffffff811115613be557613be4613477565b5b613bf187828801613b4c565b91505092959194509250565b60008060408385031215613c1457613c13613472565b5b6000613c22858286016136bf565b9250506020613c33858286016136bf565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c77826135e9565b9150613c82836135e9565b9250828201905080821115613c9a57613c99613c3d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ce757607f821691505b602082108103613cfa57613cf9613ca0565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d5c602183613542565b9150613d6782613d00565b604082019050919050565b60006020820190508181036000830152613d8b81613d4f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613dee603d83613542565b9150613df982613d92565b604082019050919050565b60006020820190508181036000830152613e1d81613de1565b9050919050565b7f436f6e74726163742063757272656e746c792070617573656400000000000000600082015250565b6000613e5a601983613542565b9150613e6582613e24565b602082019050919050565b60006020820190508181036000830152613e8981613e4d565b9050919050565b7f50726573616c6520686173206e6f7420656e6465642079657400000000000000600082015250565b6000613ec6601983613542565b9150613ed182613e90565b602082019050919050565b60006020820190508181036000830152613ef581613eb9565b9050919050565b7f457863656564206d6178696d756d2043727970746f204465767320737570706c60008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f58602183613542565b9150613f6382613efc565b604082019050919050565b60006020820190508181036000830152613f8781613f4b565b9050919050565b6000613f99826135e9565b9150613fa4836135e9565b9250828202613fb2816135e9565b91508282048414831517613fc957613fc8613c3d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061400a826135e9565b9150614015836135e9565b92508261402557614024613fd0565b5b828204905092915050565b600061403b826135e9565b9150614046836135e9565b925082820390508181111561405e5761405d613c3d565b5b92915050565b600081905092915050565b50565b600061407f600083614064565b915061408a8261406f565b600082019050919050565b60006140a082614072565b9150819050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614106603183613542565b9150614111826140aa565b604082019050919050565b60006020820190508181036000830152614135816140f9565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614198602b83613542565b91506141a38261413c565b604082019050919050565b600060208201905081810360008301526141c78161418b565b9050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000614204601483613542565b915061420f826141ce565b602082019050919050565b60006020820190508181036000830152614233816141f7565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614296602c83613542565b91506142a18261423a565b604082019050919050565b600060208201905081810360008301526142c581614289565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261435d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614320565b6143678683614320565b95508019841693508086168417925050509392505050565b6000819050919050565b60006143a461439f61439a846135e9565b61437f565b6135e9565b9050919050565b6000819050919050565b6143be83614389565b6143d26143ca826143ab565b84845461432d565b825550505050565b600090565b6143e76143da565b6143f28184846143b5565b505050565b5b818110156144165761440b6000826143df565b6001810190506143f8565b5050565b601f82111561445b5761442c816142fb565b61443584614310565b81016020851015614444578190505b61445861445085614310565b8301826143f7565b50505b505050565b600082821c905092915050565b600061447e60001984600802614460565b1980831691505092915050565b6000614497838361446d565b9150826002028217905092915050565b6144b082613537565b67ffffffffffffffff8111156144c9576144c86138f8565b5b6144d38254613ccf565b6144de82828561441a565b600060209050601f83116001811461451157600084156144ff578287015190505b614509858261448b565b865550614571565b601f19841661451f866142fb565b60005b8281101561454757848901518255600182019150602085019450602081019050614522565b868310156145645784890151614560601f89168261446d565b8355505b6001600288020188555050505b505050505050565b7f50726573616c65206973206e6f742072756e6e696e6700000000000000000000600082015250565b60006145af601683613542565b91506145ba82614579565b602082019050919050565b600060208201905081810360008301526145de816145a2565b9050919050565b6000815190506145f481613714565b92915050565b6000602082840312156146105761460f613472565b5b600061461e848285016145e5565b91505092915050565b7f596f7520617265206e6f742077686974656c6973746564000000000000000000600082015250565b600061465d601783613542565b915061466882614627565b602082019050919050565b6000602082019050818103600083015261468c81614650565b9050919050565b7f4578636565646564206d6178696d756d2043727970746f20446576732073757060008201527f706c790000000000000000000000000000000000000000000000000000000000602082015250565b60006146ef602383613542565b91506146fa82614693565b604082019050919050565b6000602082019050818103600083015261471e816146e2565b9050919050565b7f45746865722073656e74206973206e6f7420636f727265637400000000000000600082015250565b600061475b601983613542565b915061476682614725565b602082019050919050565b6000602082019050818103600083015261478a8161474e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006147c7601883613542565b91506147d282614791565b602082019050919050565b600060208201905081810360008301526147f6816147ba565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614859602983613542565b9150614864826147fd565b604082019050919050565b600060208201905081810360008301526148888161484c565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006148eb602f83613542565b91506148f68261488f565b604082019050919050565b6000602082019050818103600083015261491a816148de565b9050919050565b600081905092915050565b600061493782613537565b6149418185614921565b9350614951818560208601613553565b80840191505092915050565b6000815461496a81613ccf565b6149748186614921565b9450600182166000811461498f57600181146149a4576149d7565b60ff19831686528115158202860193506149d7565b6149ad856142fb565b60005b838110156149cf578154818901526001820191506020810190506149b0565b838801955050505b50505092915050565b60006149ec828661492c565b91506149f8828561492c565b9150614a04828461495d565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a6d602683613542565b9150614a7882614a11565b604082019050919050565b60006020820190508181036000830152614a9c81614a60565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614ad9602083613542565b9150614ae482614aa3565b602082019050919050565b60006020820190508181036000830152614b0881614acc565b9050919050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b6000614b6b602a83613542565b9150614b7682614b0f565b604082019050919050565b60006020820190508181036000830152614b9a81614b5e565b9050919050565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b6000614bd7601b83613542565b9150614be282614ba1565b602082019050919050565b60006020820190508181036000830152614c0681614bca565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614c69602583613542565b9150614c7482614c0d565b604082019050919050565b60006020820190508181036000830152614c9881614c5c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614cfb602483613542565b9150614d0682614c9f565b604082019050919050565b60006020820190508181036000830152614d2a81614cee565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614d8d602d83613542565b9150614d9882614d31565b604082019050919050565b60006020820190508181036000830152614dbc81614d80565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614df9601983613542565b9150614e0482614dc3565b602082019050919050565b60006020820190508181036000830152614e2881614dec565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614e8b603283613542565b9150614e9682614e2f565b604082019050919050565b60006020820190508181036000830152614eba81614e7e565b9050919050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000614f1d603583613542565b9150614f2882614ec1565b604082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614f7a82614f53565b614f848185614f5e565b9350614f94818560208601613553565b614f9d8161357d565b840191505092915050565b6000608082019050614fbd600083018761367e565b614fca602083018661367e565b614fd7604083018561376d565b8181036060830152614fe98184614f6f565b905095945050505050565b600081519050615003816134a8565b92915050565b60006020828403121561501f5761501e613472565b5b600061502d84828501614ff4565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061506c602083613542565b915061507782615036565b602082019050919050565b6000602082019050818103600083015261509b8161505f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006150d8601c83613542565b91506150e3826150a2565b602082019050919050565b60006020820190508181036000830152615107816150cb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe697066733a2f2f516d54706e6344633943394e5a774b457470695a6d43374e667443776233796256377865617043367962315a31732fa2646970667358221220df09133c6519a070491d5f3cc9270d17ba4a874eeee89f2ecfcb966586f9fc7a64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061021e5760003560e01c80634f6ccce7116101235780638da5cb5b116100ab578063c87b56dd1161006f578063c87b56dd14610778578063e580b2b0146107b5578063e8a3d485146107e0578063e985e9c51461080b578063f2fde38b1461084857610225565b80638da5cb5b146106a557806395d89b41146106d0578063a22cb465146106fb578063b88d4fde14610724578063c66828621461074d57610225565b80635f769621116100f25780635f769621146105be5780636352211e146105e957806370a0823114610626578063714cff5614610663578063715018a61461068e57610225565b80634f6ccce714610525578063530284021461056257806355f804b31461058b57806359533d6c146105b457610225565b806318160ddd116101a65780632f745c59116101755780632f745c5914610452578063326bb4ad1461048f5780633ccfd60b146104ba57806342842e0e146104d157806343bc1612146104fa57610225565b806318160ddd14610395578063235b6ea1146103c057806323b872dd146103eb5780632a55205a1461041457610225565b8063081812fc116101ed578063081812fc146102d1578063095ea7b31461030e5780631249c58b1461033757806316c38b3c1461034157806316c61ccc1461036a57610225565b806301ffc9a71461022757806304549d6f1461026457806304c98b2b1461028f57806306fdde03146102a657610225565b3661022557005b005b34801561023357600080fd5b5061024e600480360381019061024991906134d4565b610871565b60405161025b919061351c565b60405180910390f35b34801561027057600080fd5b50610279610883565b604051610286919061351c565b60405180910390f35b34801561029b57600080fd5b506102a4610894565b005b3480156102b257600080fd5b506102bb6108cc565b6040516102c891906135c7565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f3919061361f565b61095e565b604051610305919061368d565b60405180910390f35b34801561031a57600080fd5b50610335600480360381019061033091906136d4565b6109a4565b005b61033f610abb565b005b34801561034d57600080fd5b5061036860048036038101906103639190613740565b610d1c565b005b34801561037657600080fd5b5061037f610d41565b60405161038c919061351c565b60405180910390f35b3480156103a157600080fd5b506103aa610d54565b6040516103b7919061377c565b60405180910390f35b3480156103cc57600080fd5b506103d5610d61565b6040516103e2919061377c565b60405180910390f35b3480156103f757600080fd5b50610412600480360381019061040d9190613797565b610d67565b005b34801561042057600080fd5b5061043b600480360381019061043691906137ea565b610dc7565b60405161044992919061382a565b60405180910390f35b34801561045e57600080fd5b50610479600480360381019061047491906136d4565b610fb1565b604051610486919061377c565b60405180910390f35b34801561049b57600080fd5b506104a4611056565b6040516104b1919061387a565b60405180910390f35b3480156104c657600080fd5b506104cf611074565b005b3480156104dd57600080fd5b506104f860048036038101906104f39190613797565b61113e565b005b34801561050657600080fd5b5061050f61115e565b60405161051c919061368d565b60405180910390f35b34801561053157600080fd5b5061054c6004803603810190610547919061361f565b611184565b604051610559919061377c565b60405180910390f35b34801561056e57600080fd5b50610589600480360381019061058491906138c1565b6111f5565b005b34801561059757600080fd5b506105b260048036038101906105ad9190613a23565b611231565b005b6105bc61124c565b005b3480156105ca57600080fd5b506105d36115cc565b6040516105e0919061377c565b60405180910390f35b3480156105f557600080fd5b50610610600480360381019061060b919061361f565b6115d2565b60405161061d919061368d565b60405180910390f35b34801561063257600080fd5b5061064d60048036038101906106489190613a6c565b611658565b60405161065a919061377c565b60405180910390f35b34801561066f57600080fd5b5061067861170f565b604051610685919061377c565b60405180910390f35b34801561069a57600080fd5b506106a3611715565b005b3480156106b157600080fd5b506106ba611729565b6040516106c7919061368d565b60405180910390f35b3480156106dc57600080fd5b506106e5611753565b6040516106f291906135c7565b60405180910390f35b34801561070757600080fd5b50610722600480360381019061071d9190613a99565b6117e5565b005b34801561073057600080fd5b5061074b60048036038101906107469190613b7a565b6117fb565b005b34801561075957600080fd5b5061076261185d565b60405161076f91906135c7565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a919061361f565b6118eb565b6040516107ac91906135c7565b60405180910390f35b3480156107c157600080fd5b506107ca611995565b6040516107d7919061377c565b60405180910390f35b3480156107ec57600080fd5b506107f561199b565b60405161080291906135c7565b60405180910390f35b34801561081757600080fd5b50610832600480360381019061082d9190613bfd565b6119bb565b60405161083f919061351c565b60405180910390f35b34801561085457600080fd5b5061086f600480360381019061086a9190613a6c565b611a4f565b005b600061087c82611ad2565b9050919050565b60148054906101000a900460ff1681565b61089c611b4c565b60016014806101000a81548160ff02191690831515021790555061012c426108c49190613c6c565b601581905550565b6060600080546108db90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461090790613ccf565b80156109545780601f1061092957610100808354040283529160200191610954565b820191906000526020600020905b81548152906001019060200180831161093757829003601f168201915b5050505050905090565b600061096982611bca565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109af826115d2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690613d72565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a3e611c15565b73ffffffffffffffffffffffffffffffffffffffff161480610a6d5750610a6c81610a67611c15565b6119bb565b5b610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa390613e04565b60405180910390fd5b610ab68383611c1d565b505050565b601160009054906101000a900460ff1615610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290613e70565b60405180910390fd5b60148054906101000a900460ff168015610b2757506015544210155b610b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5d90613edc565b60405180910390fd5b60125460135410610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390613f6e565b60405180910390fd5b600160136000828254610bbf9190613c6c565b92505081905550610bce611729565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce757601054341015610c0f57600080fd5b60006064600f60149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1634610c479190613f8e565b610c519190613fff565b9050610c5c81611cd6565b6000610c66611729565b73ffffffffffffffffffffffffffffffffffffffff168234610c889190614030565b604051610c9490614095565b60006040518083038185875af1925050503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b5050905080610ce457600080fd5b50505b610cf333601354611d72565b610d1a60135433600f60149054906101000a90046bffffffffffffffffffffffff16611d90565b565b610d24611b4c565b80601160006101000a81548160ff02191690831515021790555050565b601160009054906101000a900460ff1681565b6000600880549050905090565b60105481565b610d78610d72611c15565b82611f37565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae9061411c565b60405180910390fd5b610dc2838383611fcc565b505050565b6000806000600b60008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603610f5c57600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b6000610f666122c5565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff1686610f929190613f8e565b610f9c9190613fff565b90508160000151819350935050509250929050565b6000610fbc83611658565b8210610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906141ae565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600f60149054906101000a90046bffffffffffffffffffffffff1681565b61107c611b4c565b6000611086611729565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff16826040516110b390614095565b60006040518083038185875af1925050503d80600081146110f0576040519150601f19603f3d011682016040523d82523d6000602084013e6110f5565b606091505b5050905080611139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111309061421a565b60405180910390fd5b505050565b611159838383604051806020016040528060008152506122cf565b505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061118e610d54565b82106111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c6906142ac565b60405180910390fd5b600882815481106111e3576111e26142cc565b5b90600052602060002001549050919050565b6111fd611b4c565b80600f60146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555050565b611239611b4c565b80600e908161124891906144a7565b5050565b601160009054906101000a900460ff161561129c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129390613e70565b60405180910390fd5b60148054906101000a900460ff1680156112b7575060155442105b6112f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ed906145c5565b60405180910390fd5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306c933d8336040518263ffffffff1660e01b8152600401611351919061368d565b602060405180830381865afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139291906145fa565b6113d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c890614673565b60405180910390fd5b60125460135410611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90614705565b60405180910390fd5b60105434101561145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145390614771565b60405180910390fd5b60016013600082825461146f9190613c6c565b9250508190555061147e611729565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611597576010543410156114bf57600080fd5b60006064600f60149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16346114f79190613f8e565b6115019190613fff565b905061150c81611cd6565b6000611516611729565b73ffffffffffffffffffffffffffffffffffffffff1682346115389190614030565b60405161154490614095565b60006040518083038185875af1925050503d8060008114611581576040519150601f19603f3d011682016040523d82523d6000602084013e611586565b606091505b505090508061159457600080fd5b50505b6115a333601354611d72565b6115ca60135433600f60149054906101000a90046bffffffffffffffffffffffff16611d90565b565b60125481565b6000806115de83612331565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361164f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611646906147dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf9061486f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60135481565b61171d611b4c565b611727600061236e565b565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461176290613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461178e90613ccf565b80156117db5780601f106117b0576101008083540402835291602001916117db565b820191906000526020600020905b8154815290600101906020018083116117be57829003601f168201915b5050505050905090565b6117f76117f0611c15565b8383612434565b5050565b61180c611806611c15565b83611f37565b61184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118429061411c565b60405180910390fd5b611857848484846125a0565b50505050565b600d805461186a90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461189690613ccf565b80156118e35780601f106118b8576101008083540402835291602001916118e3565b820191906000526020600020905b8154815290600101906020018083116118c657829003601f168201915b505050505081565b60606118f6826125fc565b611935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192c90614901565b60405180910390fd5b600061193f61263d565b9050600081511161195f576040518060200160405280600081525061198d565b80611969846126cf565b600d60405160200161197d939291906149e0565b6040516020818303038152906040525b915050919050565b60155481565b606060405180606001604052806036815260200161513e60369139905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a57611b4c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd90614a83565b60405180910390fd5b611acf8161236e565b50565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611b455750611b448261279d565b5b9050919050565b611b54611c15565b73ffffffffffffffffffffffffffffffffffffffff16611b72611729565b73ffffffffffffffffffffffffffffffffffffffff1614611bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbf90614aef565b60405180910390fd5b565b611bd3816125fc565b611c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c09906147dd565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c90836115d2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051611d1e90614095565b60006040518083038185875af1925050503d8060008114611d5b576040519150601f19603f3d011682016040523d82523d6000602084013e611d60565b606091505b5050905080611d6e57600080fd5b5050565b611d8c828260405180602001604052806000815250612817565b5050565b611d986122c5565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115611df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ded90614b81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90614bed565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600b600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b600080611f43836115d2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f855750611f8481856119bb565b5b80611fc357508373ffffffffffffffffffffffffffffffffffffffff16611fab8461095e565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611fec826115d2565b73ffffffffffffffffffffffffffffffffffffffff1614612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990614c7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a890614d11565b60405180910390fd5b6120be8383836001612872565b8273ffffffffffffffffffffffffffffffffffffffff166120de826115d2565b73ffffffffffffffffffffffffffffffffffffffff1614612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212b90614c7f565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c083838360016129d0565b505050565b6000612710905090565b6122e06122da611c15565b83611f37565b61231f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231690614da3565b60405180910390fd5b61232b848484846125a0565b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249990614e0f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612593919061351c565b60405180910390a3505050565b6125ab848484611fcc565b6125b7848484846129d6565b6125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed90614ea1565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661261e83612331565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600e805461264c90613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461267890613ccf565b80156126c55780601f1061269a576101008083540402835291602001916126c5565b820191906000526020600020905b8154815290600101906020018083116126a857829003601f168201915b5050505050905090565b6060600060016126de84612b5d565b01905060008167ffffffffffffffff8111156126fd576126fc6138f8565b5b6040519080825280601f01601f19166020018201604052801561272f5781602001600182028036833780820191505090505b509050600082602001820190505b600115612792578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161278657612785613fd0565b5b0494506000850361273d575b819350505050919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612810575061280f82612cb0565b5b9050919050565b6128218383612d92565b61282e60008484846129d6565b61286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286490614ea1565b60405180910390fd5b505050565b61287e84848484612faf565b60018111156128c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b990614f33565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361290957612904816130d5565b612948565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461294757612946858261311e565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361298a576129858161328b565b6129c9565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129c8576129c7848261335c565b5b5b5050505050565b50505050565b60006129f78473ffffffffffffffffffffffffffffffffffffffff166133db565b15612b50578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a20611c15565b8786866040518563ffffffff1660e01b8152600401612a429493929190614fa8565b6020604051808303816000875af1925050508015612a7e57506040513d601f19601f82011682018060405250810190612a7b9190615009565b60015b612b00573d8060008114612aae576040519150601f19603f3d011682016040523d82523d6000602084013e612ab3565b606091505b506000815103612af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aef90614ea1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612b55565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612bbb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612bb157612bb0613fd0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612bf8576d04ee2d6d415b85acef81000000008381612bee57612bed613fd0565b5b0492506020810190505b662386f26fc100008310612c2757662386f26fc100008381612c1d57612c1c613fd0565b5b0492506010810190505b6305f5e1008310612c50576305f5e1008381612c4657612c45613fd0565b5b0492506008810190505b6127108310612c75576127108381612c6b57612c6a613fd0565b5b0492506004810190505b60648310612c985760648381612c8e57612c8d613fd0565b5b0492506002810190505b600a8310612ca7576001810190505b80915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612d7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612d8b5750612d8a826133fe565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df890615082565b60405180910390fd5b612e0a816125fc565b15612e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e41906150ee565b60405180910390fd5b612e58600083836001612872565b612e61816125fc565b15612ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e98906150ee565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612fab6000838360016129d0565b5050565b60018111156130cf57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146130435780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461303b9190614030565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130ce5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130c69190613c6c565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161312b84611658565b6131359190614030565b905060006007600084815260200190815260200160002054905081811461321a576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061329f9190614030565b90506000600960008481526020019081526020016000205490506000600883815481106132cf576132ce6142cc565b5b9060005260206000200154905080600883815481106132f1576132f06142cc565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806133405761333f61510e565b5b6001900381819060005260206000200160009055905550505050565b600061336783611658565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134b18161347c565b81146134bc57600080fd5b50565b6000813590506134ce816134a8565b92915050565b6000602082840312156134ea576134e9613472565b5b60006134f8848285016134bf565b91505092915050565b60008115159050919050565b61351681613501565b82525050565b6000602082019050613531600083018461350d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613571578082015181840152602081019050613556565b60008484015250505050565b6000601f19601f8301169050919050565b600061359982613537565b6135a38185613542565b93506135b3818560208601613553565b6135bc8161357d565b840191505092915050565b600060208201905081810360008301526135e1818461358e565b905092915050565b6000819050919050565b6135fc816135e9565b811461360757600080fd5b50565b600081359050613619816135f3565b92915050565b60006020828403121561363557613634613472565b5b60006136438482850161360a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136778261364c565b9050919050565b6136878161366c565b82525050565b60006020820190506136a2600083018461367e565b92915050565b6136b18161366c565b81146136bc57600080fd5b50565b6000813590506136ce816136a8565b92915050565b600080604083850312156136eb576136ea613472565b5b60006136f9858286016136bf565b925050602061370a8582860161360a565b9150509250929050565b61371d81613501565b811461372857600080fd5b50565b60008135905061373a81613714565b92915050565b60006020828403121561375657613755613472565b5b60006137648482850161372b565b91505092915050565b613776816135e9565b82525050565b6000602082019050613791600083018461376d565b92915050565b6000806000606084860312156137b0576137af613472565b5b60006137be868287016136bf565b93505060206137cf868287016136bf565b92505060406137e08682870161360a565b9150509250925092565b6000806040838503121561380157613800613472565b5b600061380f8582860161360a565b92505060206138208582860161360a565b9150509250929050565b600060408201905061383f600083018561367e565b61384c602083018461376d565b9392505050565b60006bffffffffffffffffffffffff82169050919050565b61387481613853565b82525050565b600060208201905061388f600083018461386b565b92915050565b61389e81613853565b81146138a957600080fd5b50565b6000813590506138bb81613895565b92915050565b6000602082840312156138d7576138d6613472565b5b60006138e5848285016138ac565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139308261357d565b810181811067ffffffffffffffff8211171561394f5761394e6138f8565b5b80604052505050565b6000613962613468565b905061396e8282613927565b919050565b600067ffffffffffffffff82111561398e5761398d6138f8565b5b6139978261357d565b9050602081019050919050565b82818337600083830152505050565b60006139c66139c184613973565b613958565b9050828152602081018484840111156139e2576139e16138f3565b5b6139ed8482856139a4565b509392505050565b600082601f830112613a0a57613a096138ee565b5b8135613a1a8482602086016139b3565b91505092915050565b600060208284031215613a3957613a38613472565b5b600082013567ffffffffffffffff811115613a5757613a56613477565b5b613a63848285016139f5565b91505092915050565b600060208284031215613a8257613a81613472565b5b6000613a90848285016136bf565b91505092915050565b60008060408385031215613ab057613aaf613472565b5b6000613abe858286016136bf565b9250506020613acf8582860161372b565b9150509250929050565b600067ffffffffffffffff821115613af457613af36138f8565b5b613afd8261357d565b9050602081019050919050565b6000613b1d613b1884613ad9565b613958565b905082815260208101848484011115613b3957613b386138f3565b5b613b448482856139a4565b509392505050565b600082601f830112613b6157613b606138ee565b5b8135613b71848260208601613b0a565b91505092915050565b60008060008060808587031215613b9457613b93613472565b5b6000613ba2878288016136bf565b9450506020613bb3878288016136bf565b9350506040613bc48782880161360a565b925050606085013567ffffffffffffffff811115613be557613be4613477565b5b613bf187828801613b4c565b91505092959194509250565b60008060408385031215613c1457613c13613472565b5b6000613c22858286016136bf565b9250506020613c33858286016136bf565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c77826135e9565b9150613c82836135e9565b9250828201905080821115613c9a57613c99613c3d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ce757607f821691505b602082108103613cfa57613cf9613ca0565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d5c602183613542565b9150613d6782613d00565b604082019050919050565b60006020820190508181036000830152613d8b81613d4f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613dee603d83613542565b9150613df982613d92565b604082019050919050565b60006020820190508181036000830152613e1d81613de1565b9050919050565b7f436f6e74726163742063757272656e746c792070617573656400000000000000600082015250565b6000613e5a601983613542565b9150613e6582613e24565b602082019050919050565b60006020820190508181036000830152613e8981613e4d565b9050919050565b7f50726573616c6520686173206e6f7420656e6465642079657400000000000000600082015250565b6000613ec6601983613542565b9150613ed182613e90565b602082019050919050565b60006020820190508181036000830152613ef581613eb9565b9050919050565b7f457863656564206d6178696d756d2043727970746f204465767320737570706c60008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f58602183613542565b9150613f6382613efc565b604082019050919050565b60006020820190508181036000830152613f8781613f4b565b9050919050565b6000613f99826135e9565b9150613fa4836135e9565b9250828202613fb2816135e9565b91508282048414831517613fc957613fc8613c3d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061400a826135e9565b9150614015836135e9565b92508261402557614024613fd0565b5b828204905092915050565b600061403b826135e9565b9150614046836135e9565b925082820390508181111561405e5761405d613c3d565b5b92915050565b600081905092915050565b50565b600061407f600083614064565b915061408a8261406f565b600082019050919050565b60006140a082614072565b9150819050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614106603183613542565b9150614111826140aa565b604082019050919050565b60006020820190508181036000830152614135816140f9565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614198602b83613542565b91506141a38261413c565b604082019050919050565b600060208201905081810360008301526141c78161418b565b9050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000614204601483613542565b915061420f826141ce565b602082019050919050565b60006020820190508181036000830152614233816141f7565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614296602c83613542565b91506142a18261423a565b604082019050919050565b600060208201905081810360008301526142c581614289565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261435d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614320565b6143678683614320565b95508019841693508086168417925050509392505050565b6000819050919050565b60006143a461439f61439a846135e9565b61437f565b6135e9565b9050919050565b6000819050919050565b6143be83614389565b6143d26143ca826143ab565b84845461432d565b825550505050565b600090565b6143e76143da565b6143f28184846143b5565b505050565b5b818110156144165761440b6000826143df565b6001810190506143f8565b5050565b601f82111561445b5761442c816142fb565b61443584614310565b81016020851015614444578190505b61445861445085614310565b8301826143f7565b50505b505050565b600082821c905092915050565b600061447e60001984600802614460565b1980831691505092915050565b6000614497838361446d565b9150826002028217905092915050565b6144b082613537565b67ffffffffffffffff8111156144c9576144c86138f8565b5b6144d38254613ccf565b6144de82828561441a565b600060209050601f83116001811461451157600084156144ff578287015190505b614509858261448b565b865550614571565b601f19841661451f866142fb565b60005b8281101561454757848901518255600182019150602085019450602081019050614522565b868310156145645784890151614560601f89168261446d565b8355505b6001600288020188555050505b505050505050565b7f50726573616c65206973206e6f742072756e6e696e6700000000000000000000600082015250565b60006145af601683613542565b91506145ba82614579565b602082019050919050565b600060208201905081810360008301526145de816145a2565b9050919050565b6000815190506145f481613714565b92915050565b6000602082840312156146105761460f613472565b5b600061461e848285016145e5565b91505092915050565b7f596f7520617265206e6f742077686974656c6973746564000000000000000000600082015250565b600061465d601783613542565b915061466882614627565b602082019050919050565b6000602082019050818103600083015261468c81614650565b9050919050565b7f4578636565646564206d6178696d756d2043727970746f20446576732073757060008201527f706c790000000000000000000000000000000000000000000000000000000000602082015250565b60006146ef602383613542565b91506146fa82614693565b604082019050919050565b6000602082019050818103600083015261471e816146e2565b9050919050565b7f45746865722073656e74206973206e6f7420636f727265637400000000000000600082015250565b600061475b601983613542565b915061476682614725565b602082019050919050565b6000602082019050818103600083015261478a8161474e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006147c7601883613542565b91506147d282614791565b602082019050919050565b600060208201905081810360008301526147f6816147ba565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614859602983613542565b9150614864826147fd565b604082019050919050565b600060208201905081810360008301526148888161484c565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006148eb602f83613542565b91506148f68261488f565b604082019050919050565b6000602082019050818103600083015261491a816148de565b9050919050565b600081905092915050565b600061493782613537565b6149418185614921565b9350614951818560208601613553565b80840191505092915050565b6000815461496a81613ccf565b6149748186614921565b9450600182166000811461498f57600181146149a4576149d7565b60ff19831686528115158202860193506149d7565b6149ad856142fb565b60005b838110156149cf578154818901526001820191506020810190506149b0565b838801955050505b50505092915050565b60006149ec828661492c565b91506149f8828561492c565b9150614a04828461495d565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a6d602683613542565b9150614a7882614a11565b604082019050919050565b60006020820190508181036000830152614a9c81614a60565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614ad9602083613542565b9150614ae482614aa3565b602082019050919050565b60006020820190508181036000830152614b0881614acc565b9050919050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b6000614b6b602a83613542565b9150614b7682614b0f565b604082019050919050565b60006020820190508181036000830152614b9a81614b5e565b9050919050565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b6000614bd7601b83613542565b9150614be282614ba1565b602082019050919050565b60006020820190508181036000830152614c0681614bca565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614c69602583613542565b9150614c7482614c0d565b604082019050919050565b60006020820190508181036000830152614c9881614c5c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614cfb602483613542565b9150614d0682614c9f565b604082019050919050565b60006020820190508181036000830152614d2a81614cee565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614d8d602d83613542565b9150614d9882614d31565b604082019050919050565b60006020820190508181036000830152614dbc81614d80565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614df9601983613542565b9150614e0482614dc3565b602082019050919050565b60006020820190508181036000830152614e2881614dec565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614e8b603283613542565b9150614e9682614e2f565b604082019050919050565b60006020820190508181036000830152614eba81614e7e565b9050919050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000614f1d603583613542565b9150614f2882614ec1565b604082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614f7a82614f53565b614f848185614f5e565b9350614f94818560208601613553565b614f9d8161357d565b840191505092915050565b6000608082019050614fbd600083018761367e565b614fca602083018661367e565b614fd7604083018561376d565b8181036060830152614fe98184614f6f565b905095945050505050565b600081519050615003816134a8565b92915050565b60006020828403121561501f5761501e613472565b5b600061502d84828501614ff4565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061506c602083613542565b915061507782615036565b602082019050919050565b6000602082019050818103600083015261509b8161505f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006150d8601c83613542565b91506150e3826150a2565b602082019050919050565b60006020820190508181036000830152615107816150cb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe697066733a2f2f516d54706e6344633943394e5a774b457470695a6d43374e667443776233796256377865617043367962315a31732fa2646970667358221220df09133c6519a070491d5f3cc9270d17ba4a874eeee89f2ecfcb966586f9fc7a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint()": {
        "details": "mint allows a user to mint 1 NFT per transaction after the presale has ended."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 157,
        "contract": "contracts/IG.sol:IG",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 159,
        "contract": "contracts/IG.sol:IG",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/IG.sol:IG",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 167,
        "contract": "contracts/IG.sol:IG",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 171,
        "contract": "contracts/IG.sol:IG",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 177,
        "contract": "contracts/IG.sol:IG",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1225,
        "contract": "contracts/IG.sol:IG",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1229,
        "contract": "contracts/IG.sol:IG",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1232,
        "contract": "contracts/IG.sol:IG",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1236,
        "contract": "contracts/IG.sol:IG",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1639,
        "contract": "contracts/IG.sol:IG",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)1636_storage"
      },
      {
        "astId": 1644,
        "contract": "contracts/IG.sol:IG",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1636_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/IG.sol:IG",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3266,
        "contract": "contracts/IG.sol:IG",
        "label": "baseExtension",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 3268,
        "contract": "contracts/IG.sol:IG",
        "label": "baseURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 3270,
        "contract": "contracts/IG.sol:IG",
        "label": "artist",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 3272,
        "contract": "contracts/IG.sol:IG",
        "label": "royalityFee",
        "offset": 20,
        "slot": "15",
        "type": "t_uint96"
      },
      {
        "astId": 3283,
        "contract": "contracts/IG.sol:IG",
        "label": "_price",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3285,
        "contract": "contracts/IG.sol:IG",
        "label": "_paused",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 3288,
        "contract": "contracts/IG.sol:IG",
        "label": "maxTokenIds",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3290,
        "contract": "contracts/IG.sol:IG",
        "label": "tokenIds",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3293,
        "contract": "contracts/IG.sol:IG",
        "label": "whitelist",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IWhitelist)3827"
      },
      {
        "astId": 3295,
        "contract": "contracts/IG.sol:IG",
        "label": "presaleStarted",
        "offset": 20,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 3297,
        "contract": "contracts/IG.sol:IG",
        "label": "presaleEnded",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWhitelist)3827": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1636_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1636_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1636_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1633,
            "contract": "contracts/IG.sol:IG",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1635,
            "contract": "contracts/IG.sol:IG",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}